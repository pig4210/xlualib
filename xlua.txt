xlua版本 6.1


-------- -------- -------- --------
             AES
-------- -------- -------- --------
AES加密：使用padding时，自动pkcs7padding。否则不对齐部分不加密，忽略之
AES解密：不对齐部分不解密，忽略之
不使用padding时，默认块大小==16
提供的KEY长度不足16时，以0补足



●
    string    aes_ecb_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 16
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    aes_ecb_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 16
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    aes.ecb.p7enc             ( ... );                        [-2|3, +1, c|v]
    string    aes.ecb.p7dec             ( ... );                        [-2|3, +1, c|v]
    string    string:aes_ecb_p7_enc     ( ... );                        [-1|2, +1, c|v]
    string    string:aes_ecb_p7_dec     ( ... );                        [-1|2, +1, c|v]
    
    string    aes_cbc_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 16
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    aes_cbc_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 16
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    aes.cbc.p7enc             ( ... );                      [-2|3|4, +1, c|v]
    string    aes.cbc.p7dec             ( ... );                      [-2|3|4, +1, c|v]
    string    string:aes_cbc_p7_enc     ( ... );                      [-1|2|3, +1, c|v]
    string    string:aes_cbc_p7_dec     ( ... );                      [-1|2|3, +1, c|v]
    
    -------- -------- -------- -------- 
    string    aes_ecb_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 16
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    aes_ecb_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 16
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    aes.ecb.enc               ( ... );                        [-2|3, +1, c|v]
    string    aes.ecb.enc               ( ... );                        [-2|3, +1, c|v]
    string    string:aes_ecb_enc        ( ... );                        [-1|2, +1, c|v]
    string    string:aes_ecb_dec        ( ... );                        [-1|2, +1, c|v]
    
    string    aes_cbc_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 16
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    aes_cbc_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 16
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    aes.cbc.enc            ( ... );                         [-2|3|4, +1, c|v]
    string    aes.cbc.dec            ( ... );                         [-2|3|4, +1, c|v]
    string    string:aes_cbc_enc     ( ... );                         [-1|2|4, +1, c|v]
    string    string:aes_cbc_dec     ( ... );                         [-1|2|4, +1, c|v]
    



-------- -------- -------- --------
          algorithm操作
-------- -------- -------- --------



●
    int       xrand           ( [int mod = 0] );                          [-0|1, +1, -]



●
    string    strxor          ( string data, int|string xor );              [-2, +1, c]
    string    string:xor      ( int|string xor );                           [-1, +1, c]
      --xor因子可以为字符串原始值如"\x12\x34"
      --当xor因子为数值时，将转换成小端序的字符串原始值，并去除高位00
      --如0x00001234等价于"\x34\x12"
      --请不要提供0值，因为没有意义，函数会视为空参数



●
    string    md5             ( string data );                              [-1, +1, c]
    string    string:md5      ( );                                          [-0, +1, -]



●
    int       crc16           ( string data );                              [-1, +1, c]
    int       crc32           ( string data );                              [-1, +1, c]
    int       crc64           ( string data );                              [-1, +1, c]
    int       crcccitt        ( string data );                              [-1, +1, c]

    int       string:crc16    ( );                                          [-0, +1, -]
    int       string:crc32    ( );                                          [-0, +1, -]
    int       string:crc64    ( );                                          [-0, +1, -]
    int       string:crcccitt ( );                                          [-0, +1, -]



●
    string    tovarint        ( int value );                                [-1, +1, c]
    int value, int userbytes
              getvarint       ( string data );                              [-1, +2, c|v]
    int value, int userbytes
              string:getvarint( );                                          [-0, +2, c|v]



●
    string    TeanEncrypt     ( string data, string key );                  [-2, +1, c]
    string    TeanDecrypt     ( string data, string key );                  [-2, +1, c]
    string    TeaEncrypt      (
                              string  data,
                              string  key,
                              int     delta,
                              int     round
                              );                                            [-4, +1, c]
    string    TeaDecrypt      (
                              string  data,
                              string  key,
                              int     delta,
                              int     round
                              );                                            [-4, +1, c]
    string    TeanEncipher    ( string data, string key );                  [-2, +1, c]
    string    TeanDecipher    ( string data, string key );                  [-2, +1, c]
    string    XTeanEncrypt    ( string data, string key );                  [-2, +1, c]
    string    XTeanDecrypt    ( string data, string key );                  [-2, +1, c]
    string    XxTeaEncrypt    ( string data, string key );                  [-2, +1, c]
    string    XxTeaDecrypt    ( string data, string key );                  [-2, +1, c]
    
    string    string:tean_enc ( string key );                               [-1, +1, c]
    string    string:tean_dec ( string key );                               [-1, +1, c]
    string    string:tea_enc  ( string key, int delta, int round );         [-3, +1, c]
    string    string:tea_dec  ( string key, int delta, int round );         [-3, +1, c]
    string    string:tea_enr  ( string key );                               [-1, +1, c]
    string    string:tea_der  ( string key );                               [-1, +1, e]
    string    string:xtean_enc( string key );                               [-1, +1, e]
    string    string:xtean_dec( string key );                               [-1, +1, e]
    string    string:xxtea_enc( string key );                               [-1, +1, e]
    string    string:xxtea_dec( string key );                               [-1, +1, e]



●
    string    aes_encrypt     ( string data, string key );                  [-2, +1, c]
    string    aes_decrypt     ( string data, string key );                  [-2, +1, c]
    
    string    string:aes_enc  ( string key );                               [-1, +1, c]
    string    string:aes_dec  ( string key );                               [-1, +1, c]



●
    string    des_encrypt     ( string data, string key );                  [-2, +1, c]
    string    des_decrypt     ( string data, string key );                  [-2, +1, c]
    
    string    string:des_enc  ( string key );                               [-1, +1, c]
    string    string:des_dec  ( string key );                               [-1, +1, c]



-------- -------- -------- --------
           BLOWFISH
-------- -------- -------- --------
BLOWFISH加密：使用padding时，自动pkcs7padding。否则不对齐部分不加密，忽略之
BLOWFISH解密：不对齐部分不解密，忽略之
不使用padding时，默认块大小==8
提供的KEY长度不足8时，以0补足



●
    string    blowfish_ecb_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        );                              [-2|3, +1, c|v]
    string    blowfish_ecb_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        );                              [-2|3, +1, c|v]
    string    blowfish.ecb.p7enc        ( ... );                        [-2|3, +1, c|v]
    string    blowfish.ecb.p7dec        ( ... );                        [-2|3, +1, c|v]
    string    string:bf_ecb_p7_enc      ( ... );                        [-1|2, +1, c|v]
    string    string:bf_ecb_p7_dec      ( ... );                        [-1|2, +1, c|v]
    
    string    blowfish_cbc_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0"
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    blowfish_cbc_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0"
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    blowfish.cbc.p7enc        ( ... );                      [-2|3|4, +1, c|v]
    string    blowfish.cbc.p7dec        ( ... );                      [-2|3|4, +1, c|v]
    string    string:bf_cbc_p7_enc      ( ... );                      [-1|2|3, +1, c|v]
    string    string:bf_cbc_p7_dec      ( ... );                      [-1|2|3, +1, c|v]
    
    -------- -------- -------- -------- 
    string    blowfish_ecb_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 16
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    blowfish_ecb_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 16
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    blowfish.ecb.enc          ( ... );                        [-2|3, +1, c|v]
    string    blowfish.ecb.enc          ( ... );                        [-2|3, +1, c|v]
    string    string:bf_ecb_enc         ( ... );                        [-1|2, +1, c|v]
    string    string:bf_ecb_dec         ( ... );                        [-1|2, +1, c|v]
    
    string    blowfish_cbc_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 16
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    blowfish_cbc_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 16
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    blowfish.cbc.enc          ( ... );                      [-2|3|4, +1, c|v]
    string    blowfish.cbc.dec          ( ... );                      [-2|3|4, +1, c|v]
    string    string:bf_cbc_enc         ( ... );                      [-1|2|4, +1, c|v]
    string    string:bf_cbc_dec         ( ... );                      [-1|2|4, +1, c|v]
    



-------- -------- -------- --------
             DES
-------- -------- -------- --------
DES加密：使用padding时，自动pkcs7padding。否则不对齐部分不加密，忽略之
DES解密：不对齐部分不解密，忽略之
不使用padding时，默认块大小==8
提供的KEY长度不足8时，以0补足



●
    string    des_ecb_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                                [-2|3, +1, c]
    string    des_ecb_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    des.ecb.p7enc             ( ... );                          [-2|3, +1, c]
    string    des.ecb.p7dec             ( ... );                        [-2|3, +1, c|v]
    string    string:des_ecb_p7_enc     ( ... );                          [-1|2, +1, c]
    string    string:des_ecb_p7_dec     ( ... );                        [-1|2, +1, c|v]
    
    string    des_cbc_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3|4, +1, c]
    string    des_cbc_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    des.cbc.p7enc             ( ... );                        [-2|3|4, +1, c]
    string    des.cbc.p7dec             ( ... );                      [-2|3|4, +1, c|v]
    string    string:des_cbc_p7_enc     ( ... );                        [-1|2|3, +1, c]
    string    string:des_cbc_p7_dec     ( ... );                      [-1|2|3, +1, c|v]
    
    string    des_ncbc_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3|4, +1, c]
    string    des_ncbc_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    des.ncbc.p7enc             ( ... );                       [-2|3|4, +1, c]
    string    des.ncbc.p7dec             ( ... );                     [-2|3|4, +1, c|v]
    string    string:des_ncbc_p7_enc     ( ... );                       [-1|2|3, +1, c]
    string    string:des_ncbc_p7_dec     ( ... );                     [-1|2|3, +1, c|v]

    
    string    des_ecb3_pkcs7padding_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                                [-2|3, +1, c]
    string    des_ecb3_pkcs7padding_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    des.ecb3.p7enc             ( ... );                         [-2|3, +1, c]
    string    des.ecb3.p7dec             ( ... );                       [-2|3, +1, c|v]
    string    string:des_ecb3_p7_enc     ( ... );                         [-1|2, +1, c]
    string    string:des_ecb3_p7_dec     ( ... );                       [-1|2, +1, c|v]
    -------- -------- -------- -------- 
    string    des_ecb_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                                [-2|3, +1, c]
    string    des_ecb_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    des.ecb.enc            ( ... );                             [-2|3, +1, c]
    string    des.ecb.enc            ( ... );                           [-2|3, +1, c|v]
    string    string:des_ecb_enc     ( ... );                             [-1|2, +1, c]
    string    string:des_ecb_dec     ( ... );                           [-1|2, +1, c|v]
    
    string    des_cbc_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3|4, +1, c]
    string    des_cbc_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    des.cbc.enc            ( ... );                           [-2|3|4, +1, c]
    string    des.cbc.dec            ( ... );                         [-2|3|4, +1, c|v]
    string    string:des_cbc_enc     ( ... );                           [-1|2|4, +1, c]
    string    string:des_cbc_dec     ( ... );                         [-1|2|4, +1, c|v]
    
    string    des_ncbc_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3|4, +1, c]
    string    des_ncbc_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        string ivec = "\0\0\0\0\0\0\0\0",
                                        int    block_size = 8
                                        ]
                                        );                            [-2|3|4, +1, c|v]
    string    des.ncbc.enc            ( ... );                          [-2|3|4, +1, c]
    string    des.ncbc.dec            ( ... );                        [-2|3|4, +1, c|v]
    string    string:des_ncbc_enc     ( ... );                          [-1|2|3, +1, c]
    string    string:des_ncbc_dec     ( ... );                        [-1|2|3, +1, c|v]

    string    des_ecb3_encrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                                [-2|3, +1, c]
    string    des_ecb3_decrypt
                                        (
                                        string data,
                                        string key
                                        [,
                                        int    block_size = 8
                                        ]
                                        );                              [-2|3, +1, c|v]
    string    des.ecb3.enc            ( ... );                            [-2|3, +1, c]
    string    des.ecb3.enc            ( ... );                          [-2|3, +1, c|v]
    string    string:des_ecb3_enc     ( ... );                            [-1|2, +1, c]
    string    string:des_ecb3_dec     ( ... );                          [-1|2, +1, c|v]




-------- -------- -------- --------
                hex&str操作
-------- -------- -------- --------



●
    string    hex2bin         (
                               string   hex
                               [,
                               bool     errexit       = false,
                               bool     errbreak      = false
                               ]
                               );                                       [-1|2|3, +1, c]
    string    showbin         (
                              string    data
                              [,
                              int       flag
                              ]
                              );                                          [-1|2, +1, c]
      -- 为了简化参数，设计flag
      -- flag >= 0x10的部分被当作prews参数
      -- flag & 1 表示ASCII、flag & 2 表示Unicode、flag & 8 表示UTF8
      -- flag & 4 表示isup == false
    string    bin2hex         (
                              string    data
                              [,
                              bool      isup          = false
                              ]
                              );                                          [-1|2, +1, c]

    string    string:hex2bin  (
                              [
                              bool      errexit       = false,
                              bool      errbreak      = false
                              ]
                              );                                       [-0|1|2, +1, -]
    string    string:showbin  (
                              [
                              int       flag
                              ]
                              );                                          [-1|2, +1, c]
    string    string:bin2hex  (
                              [
                              bool      isup          = false
                              ]
                              );                                          [-0|1, +1, -]

                              
    string.bins = string.hex2bin;
    string.show = string.showbin;



●
    string    ws2s            ( string s );     --unicode转换为ascii        [-1, +1, c]
    string    s2ws            ( string ws );    --ascii转换为unicode        [-1, +1, c]

    string    string:ws2s     ( );              --unicode转换为ascii        [-0, +1, -]
    string    string:s2ws     ( );              --ascii转换为unicode        [-0, +1, -]



●
    string    utf82ws         ( string utf8 );   --utf8转换为unicode        [-1, +1, c]
    string    ws2utf8         ( string ws );     --unicode转换为utf8        [-1, +1, c]
    string    utf82s          ( string utf8 );   --utf8转换为ascii          [-1, +1, c]
    string    s2utf8          ( string s );      --ascii转换为utf8          [-1, +1, c]
    
    string    string:utf82ws  ( );                                          [-0, +1, -]
    string    string:ws2utf8  ( );                                          [-0, +1, -]
    string    string:utf82s   ( );                                          [-0, +1, -]
    string    string:s2utf8   ( );                                          [-0, +1, -]



●
    string    readfile        (
                              string filename
                              [, string mode = "rb" ]
                              );                                          [-1|2, +1, c]
    void      writefile       (
                              string data,
                              string filename
                              [, string mode = "wb"]
                              );                                          [-2|3, +0, c]
    string    string:read     ( [ string mode = "rb" ] );                 [-0|1, +1, -]
    void      string:write    ( string filename [, string mode = "wb" ] );[-1|2, +0, -]



-------- -------- -------- --------
            mem操作
-------- -------- -------- --------

所有指针以interger形式传输，而不是采用light userdata形式，是考虑指针运算，格式化输出等便利



●
    string [, string errmsg]
              readmem         ( void* lpmem, size_t size );               [-2, +1|2, c]
                                                --读取指定内存位置指定长度数据
                                                --无论指定内存位置是否有效都无异常抛出
                                                --读取失败返回空串, 错误消息
    bool [, string errmsg]
              writemem        ( void* lpmem, string writebytes );         [-2, +1|2, c]
                                                --写入指定内存位置指定长度数据
                                                --无论指定内存位置是否有效都无异常抛出
                                                --写失败返回false, 错误消息
    unsigned char*
              newmem          ( size_t size );                              [-1, +1, c]
                                                --指定字节大小，申请内存
                                                --成功则返回内存指针
                                                --size == 0或失败则返回nullptr
    bool      deletemem       ( unsigned char* lpmem );                     [-1, +1, c]
                                                --释放由newmem申请的内存
    
    --以下函数需要5.3及以上的string.unpack支持。低版本请自行修改源码添加之
    int|bool [, string]
              mkb             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号byte值，小端
    int|bool [, string]
              mkB             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号byte值，小端
    int|bool [, string]
              mkbb            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号byte值，大端
    int|bool [, string]
              mkBB            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号byte值，大端

    int|bool [, string]
              mkw             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号word值，小端
    int|bool [, string]
              mkW             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号word值，小端
    int|bool [, string]
              mkww            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号word值，大端
    int|bool [, string]
              mkWW            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号word值，大端
                                                
    int|bool [, string]
              mkd             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号dword值，小端
    int|bool [, string]
              mkD             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号dword值，小端
    int|bool [, string]
              mkdd            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号dword值，大端
    int|bool [, string]
              mkDD            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号dword值，大端
    
    int|bool [, string]
              mkq             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号qword值，小端
    int|bool [, string]
              mkQ             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号qword值，小端
    int|bool [, string]
              mkqq            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写有符号qword值，大端
    int|bool [, string]
              mkQQ            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写无符号qword值，大端
    
    float|bool [, string]
              mkf             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写float值，小端
    double|bool [, string]
              mkF             ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写double值，小端
    float|bool [, string]
              mkff            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写float值，大端
    double|bool [, string]
              mkFF            ( void* lpmem [, int value] );          [-1|2, +1|2, c|e]
                                                --读/写double值，大端
                                                
    int       bswap           ( int value [, int size] );                 [-1|2, +1, c]
                                                --指定翻转数据
    int       bswap_byte      ( int value );                                [-1, +1, c]
    int       bswap_word      ( int value );                                [-1, +1, c]
    int       bswap_dword     ( int value );                                [-1, +1, c]
    int       bswap_qword     ( int value );                                [-1, +1, c]



●
    void*     hook            (
                              void*     hookmem,
                              int       hooksize,
                              string    data_descibe,
                              string    len_descibe,
                              bool      docodeend
                              );                                        [-5, +1, c|e|v]
        --Hook2Log 地址
    void*     hook            (
                              void*     hookmem,
                              string    data_descibe,
                              string    len_descibe,
                              bool      calltable_offset,
                              bool      docallend
                              );                                        [-5, +1, c|e|v]
        --Hook2Log 偏移或跳转表

    void      unhook          ( void*   node );                         [-1, +0, c|e|v]
        --当unhook不给node参数时，卸载全部hook



-------- -------- -------- --------
                openssl操作
-------- -------- -------- --------



●  private:  RsaKey;
    void      RsaKey:__gc               ( );                                [-0, +0, c]
    string    RsaKey:__tostring         ( );                                [-0, +1, c]
        --返回"RsaKey*:####"



●
    RsaKey    rsa_open_public_key       ( string filename );                [-1, +1, v]
    RsaKey    rsa_set_public_key        ( string rsakey );                  [-1, +1, v]

    RsaKey    rsa_open_private_key      ( string filename );                [-1, +1, v]
    RsaKey    rsa_set_private_key       ( string rsakey );                  [-1, +1, v]
    
    string    rsa_public_encrypt        ( string data, RsaKey key );      [-2, +1, c|v]
    string    rsa_private_encrypt       ( string data, RsaKey key );      [-2, +1, c|e]

    string    rsa_public_decrypt        ( string data, RsaKey key );      [-2, +1, c|e]
    string    rsa_private_decrypt       ( string data, RsaKey key );      [-2, +1, c|e]



●
    RsaKey    rsa.pub.open              ( string filename );                [-1, +1, v]
    RsaKey    rsa.pub.set               ( string rsakey );                  [-1, +1, v]
    string    rsa.pub.enc               ( string data, RsaKey key );      [-2, +1, c|e]
    string    rsa.pub.dec               ( string data, RsaKey key );      [-2, +1, c|e]

    RsaKey    rsa.prv.open              ( string filename );                [-1, +1, v]
    RsaKey    rsa.prv.set               ( string rsakey );                  [-1, +1, v]
    string    rsa.prv.enc               ( string data, RsaKey key );      [-2, +1, c|e]
    string    rsa.prv.dec               ( string data, RsaKey key );      [-2, +1, c|e]
    
    string    string:rsa_pub_enc        ( RsaKey key );                   [-1, +1, c|e]
    string    string:rsa_pub_dec        ( RsaKey key );                   [-1, +1, c|e]
    string    string:rsa_prv_enc        ( RsaKey key );                   [-1, +1, c|e]
    string    string:rsa_prv_dec        ( RsaKey key );                   [-1, +1, c|e]



    string    base64_encode             (
                                        string    data
                                        [,
                                        bool      newline         = false
                                        ]
                                        );                                [-1|2, +1, c]
    string    base64_decode             (
                                        string    data
                                        [,
                                        bool      newline         = false
                                        ]
                                        );                                [-1|2, +1, c]
    
    string    string:b64_enc            ( [bool newline = false] );       [-0|1, +1, c]
    string    string:b64_dec            ( [bool newline = false] );       [-0|1, +1, c]



    string    sha                       (
                                        string    data
                                        [,
                                        int       algo            = 256
                                        ]
                                        );                                [-1|2, +1, c]
        --sha支持的algo有256/512/1/0/224/384
    string    string:sha                ( [int algo] );                   [-0|1, +1, c]

    --以下是SHA便捷函数组
    string    sha0                      ( string  data );                   [-1, +1, c]
    string    sha1                      ( string  data );                   [-1, +1, c]
    string    sha224                    ( string  data );                   [-1, +1, c]
    string    sha256                    ( string  data );                   [-1, +1, c]
    string    sha384                    ( string  data );                   [-1, +1, c]
    string    sha512                    ( string  data );                   [-1, +1, c]

    string    string:sha0               ( );                                [-0, +1, c]
    string    string:sha1               ( );                                [-0, +1, c]
    string    string:sha224             ( );                                [-0, +1, c]
    string    string:sha256             ( );                                [-0, +1, c]
    string    string:sha384             ( );                                [-0, +1, c]
    string    string:sha512             ( );                                [-0, +1, c]



    string    hmac                      (
                                        string    data,
                                        string    key,
                                        string    algo
                                        );                                  [-3, +1, c]
        --hmac支持的algo有"sha512/sha256/sha1/md5/sha224/sha384/sha"
    string    string:hmac               ( string key, string algo );        [-2, +1, c]



-------- -------- -------- --------
              PE操作
-------- -------- -------- --------



●
    table     PE   ( HMOUDLE hmod = nullptr | string mod_name );          [-0|1, +1, c]
        --返回
          {
          HMODULE                 hmod,
          const IMAGE_DOS_HEADER* dos_head,
          bool                    ispe,
          const IMAGE_NT_HEADERS* pe_head,
          void*                   entry,
          table                   image =
            {
            void*                 start,
            void*                 end,
            size_t                size,
            },
          table                   code =
            {
            void*                 start,
            void*                 end,
            size_t                size,
            },
          }
        --Lua5.3以下无法正确使用此函数



-------- -------- -------- --------
          serialcomm操作
-------- -------- -------- --------



●
    string[]  serialcomm.gets           ( );                                [-0, +1, v]
        --获取串行通讯口列表
        --返回表如下：
          {
          string serialcomm_1 ( "COM#" ),
          string serialcomm_2,
          ...
          }

    SerailComm serialcomm.raw_open      ( string SerialCommName );        [-1, +1, c|v]
        --指定串口名称，打开串口
        --返回打开成功的串口对象
        --此函数为原始打开，并未记录已打开的串口对象，无法通过serialcomm.close自动释放，建议使用serialcomm.open函数



●
    SerialComm[] serialcomm.opened;
        --保存使用serialcomm.open打开的串口对象，以便查询或通过serialcomm.close自动释放
        --开放此表是为了方便查询，用户被禁止修改此表，以免造成serialcomm.close无法自动释放所有已打开的串口对象
        --表格式如示：{ SerailComm, SerailComm, ... };
        ex:
            for k, v in pairs(serialcomm.opened) do
              xlog(k ,v);
            end



    SerailComm serialcomm.open          ( string SerialCommName );        [-1, +1, c|v]
        --指定串口名称，打开串口，同时保存已经打开的对象至表serialcomm.opened
        --使用此函数打开的串口对象可以使用serialcomm.close自动释放



    void      serialcomm.close          ( );                                [-0, +0, c]
        --释放表serialcomm.opened中所有的SerialComm对象并清空表



●
    private:  SerialComm;
    以下函数为串口对象操作函数
    未作特别说明情况下，串口对象操作失败，将抛出异常，同时!!释放串口对象!!

    string    SerialComm:__tostring     ( );                                [-0, +1, c]
        --输出串口对象信息
        --信息格式如示："SerialComm [COM#] (Closed & N/A | Invalid | ####)"

    void      SerialComm:__gc           ( );                                [-0, +0, c]
        --串口对象释放
        --如果串口对象有效，返回true，否则返回false

    bool      SerialComm:close          ( );                                [-0, +0, c]
        --同SerialComm:__gc，用于主动释放串口对象

    int       SerialComm:baudrate       ( [int newvalue] );             [-0|1, +1, c|v]
        --当指定newvalue时，设置串口对象BaudRate，同时返回旧值
        --未指定newvalue时，仅仅返回当前BaudRate
        --以下几个函数同理
    int       SerialComm:bytesize       ( [int newvalue] );             [-0|1, +1, c|v]
    int       SerialComm:stopbits       ( [int newvalue] );             [-0|1, +1, c|v]
    int       SerialComm:parity         ( [int newvalue] );             [-0|1, +1, c|v]

    int       SerialComm:write          ( string data );                  [-1, +1, c|v]
        --指定写入数据到串口对象，返回写入数据字节数
        --保证将指定数据全部写入串口对象

    string    SerialComm:read           ( );                              [-0, +1, c|v]
        --从串口对象读取数据
        --如果串口无数据，返回空串

    HANDLE    SerialComm:handle         ( );      --返回串口对象句柄        [-0, +1, c]

    bool      SerialComm:isopen         ( );      --检测串口有效性          [-0, +1, c]

    string    SerialComm:name           ( );      --返回串口名称，如："COM#"[-0, +1, c]

    string    SerialComm:type           ( );      --返回串口类型"SerialComm"[-0, +1, c]



-------- -------- -------- --------
             sock操作
-------- -------- -------- --------



●
    Private:  UDP;
        --UDP操作失败将抛出异常，同时!!释放对象!!

    UDP       udp_new         (
                              [
                              string|uint         ip    = "0.0.0.0",
                              string|uint         port  = "0",
                              string|uint         bind_port = "0"
                              ]
                              );                                    [-0|1|2|3, +1, c|v]
        --当ip == "0.0.0.0"且port != "0"时，绑定指定端口
        --当ip != "0.0.0.0"时，默认连接指定IP，此时，启用bind_port为绑定端口
        
    string ip, string port, uint ip, uint port
              UDP:getsockname ( );                                          [-0, +1, c]

    string ip, string port, uint ip, uint port
              UDP:getpeername ( );                                          [-0, +1, c]

    stirng    UDP:type        ( );     --返回"UDP"                          [-0, +1, c]
    
    void      UDP:close       ( );                                          [-0, +0, c]

    void      UDP:__gc        ( );                                          [-0, +0, c]

    string    UDP:__tostring  ( );                                          [-0, +1, c]
        --返回UDP{server/client}:########    local_ip:port >> link_ip:port
        
    UDP       UDP:settimeout  ( int timeout );                              [-1, +1, v]
        --接收延时，毫秒计

    UDP       UDP:broadcast   ( bool set );                                 [-1, +1, v]
        --广播设置

    UDP       UDP:send        (
                              string              data
                              [,
                              string|uint         ip    = "0.0.0.0",
                              string|uint         port  = "0"
                              ]
                              );                                      [-1|2|3, +1, c|v]
        --当不提供ip、port时，默认连接初始化时指定的IP
        
    string data, string ip, string port, uint ip, uint port
              UDP:recv        ( [ int size = 0x800 ] );               [-0|1, +2|5, c|v]
        --当不提供size时，默认提供0x800的接收缓冲区
        --超时返回nil, "timeout"
        --接收缓冲区不足返回nil, "msgsize"



●
    Private:  TCP;
        --TCP操作失败将抛出异常，同时!!释放对象!!

    TCP       tcp_new         (
                              string|uint         ip    = "0.0.0.0"
                              string|uint         port  = "0",
                              string|uint         bind_port = "0",
                              bool                NonBlockConnect = false
                              );                                          [-4, +1, c|v]
        
    string ip, string port, uint ip, uint port
              TCP:getsockname ( );                                          [-0, +1, c]

    string ip, string port, uint ip, uint port
              TCP:getpeername ( );                                          [-0, +1, c]

    stirng    TCP:type        ( );     --返回"TCP"                          [-0, +1, c]
    
    void      TCP:close       ( );                                          [-0, +0, c]

    void      TCP:__gc        ( );                                          [-0, +0, c]

    string    TCP:__tostring  ( );                                          [-0, +1, c]
        --返回TCP{server/client}:########    local_ip:port >> link_ip:port
        
    TCP       TCP:settimeout  ( int timeout );                              [-1, +1, v]
        --接收延时，毫秒计。Server不支持

    TCP       TCP:broadcast   ( bool set );                                 [-1, +1, v]
        --广播设置。Server不支持

    TCP       TCP:send        ( string data );                            [-1, +1, c|v]
        --发送数据。Server不支持
        
    string    TCP:recv        ( [ int size = 0x800 ] );               [-0|1, +1|2, c|v]
        --当不提供size时，默认提供0x800的接收缓冲区
        --超时返回nil, "timeout"。Server不支持
    TCP       TCP:accept      ( [ int timeout == -1 ]);                 [-0|1, +1|2, v]
        --Client不支持
        --当不提供timeout时，默认超时值-1，即阻塞直到连接发生
        --当提供timeout(毫秒计)时，阻塞指定时间，直到连接发生或超时返回
        --连接发生时，返回新连接的TCP对象
        --超时返回nil, "timeout"
    bool      TCP:check       ( );                                          [-0, +1, c]
        --检测NonBlockConnect的TCP是否连接成功（成功后，自动设置阻塞）



●
    table, table
              dns             ( string host );                            [-1, +2, c|v]
        -- 指定host，解析DNS
        -- 返回第一个table是ip字符串列表
        -- 返回第二个table是ip值列表，大端序



-------- -------- -------- --------
            api操作
-------- -------- -------- --------



●
    void      Sleep           ( [int ms = 0] );                           [-0|1, +0, -]
        --暂停线程ms毫秒，ms允许为空
        
    int       GetTickCount    ( );                                          [-0, +1, -]
        --获取系统启动时间毫秒数
        
    --Lua5.3以下无法正确使用以下函数
    HMODULE   GetModuleHandle ( [string mod_name] );                      [-0|1, +1, -]

    HMODULE [, int errcode]
              LoadLibrary     ( string lib_name );                        [-1, +1|2, -]

    bool [, int errocde]
              FreeLibrary     ( HMODULE mode );                           [-1, +1|2, -]

    void*     GetProcAddress  ( HMODULE mode, string name );              [-1, +1|2, -]




-------- -------- -------- --------
             xhttp操作
-------- -------- -------- --------



●
    int response_code, table response_headers, string response_body
              xhttp                     (
                                        string url
                                        [,
                                        table options
                                        ]
                                        );
                                                                          [-1|2, +3, v]
        --进行一次http访问
        --options表可以设置如下参数(注意小写名称)：
          {
          int       connect_time_out;             --连接超时，毫秒计，默认20000
          int       time_out;                     --访问超时，毫秒计，默认10000
          string    proxy;                        --代理
                                                    此项存在且不为空时，设置代理
          string    data;                         --post数据
                                                    此项存在时，http访问为post。否则默认为get
          table     header;                       --访问头
          }
        --访问头、响应头表以  [键名] = 值  形式组表

        ex:
          local c, h, b = xhttp("http://www.hj032.cn");
          for k, v in pairs(h) do
            xlog("key:" .. k, "value:" .. v);
          end

          local c, h, b = xhttp("http://www.xxxx.xx",
                                {
                                connect_time_out = 10000,
                                time_out = 500,
                                proxy = "127.0.0.1:8080",
                                data = "post data",
                                header =
                                  {
                                  xxx = "xxxx";
                                  }
                                }
                               );



-------- -------- -------- --------
             xline操作
-------- -------- -------- --------



●
    xline     xline:new                 ( );                                [-0, +1, -]
        --xline需要5.3及以上的string.pack，string.unpack支持。低版本请自行修改源码添加之
        --提供xline时，复制xline状态及内容
        --未提供状态时，默认小端，头大小2 byte，不包含头，不处理结尾0
        --xline数据项说明：
          line          数据内容(string)
          net_flag      数据处理编码(boolean)，true大端 false小端，默认小端
                        0x1234大端写入，内容为"\x12\x34"，小端写入，内容为"\x34\x12"
          head_size     数据处理头大小(int)，1byte 2word 4dword，默认2
                        "AA"作为line写入时，内容为"\x02\x00\x41\x41"
          head_self     数据处理头是否包含头大小(boolean)
                        "AA"作为line，且包含头大小写入时，内容为"\x04\x00\x41\x41"
          deal_zero_end 数据处理结尾0
                        写入字符串时，额外写入结尾0
                        读取字符串，额外读出结尾0
          nets          根据net_flag决定为大端">"或小端"<"



●
    xline     xline:newline             ( [string] );                     [-0|1, +1, -]
        --指定数据内容，初始化为xline



●
    ...       xline:pick                ( string fmt );                     [-1, +?, e]
        --指定读取格式，读取数据并修改处理索引



    int       xline:get_byte            ( );  --读取一个byte                [-0, +1, e]
    int       xline:get_word            ( );  --读取一个word                [-0, +1, e]
    int       xline:get_dword           ( );  --读取一个dword               [-0, +1, e]



    int       xline:get_varint          ( );  --读取一个varint              [-0, +1, e]



    int head_size, int real_size
              xline:get_head            ( );                                [-0, +2, e]
        --读取数据头，返回数据头值、真实数据头值(减去可能包含的数据头大小)



    xline     xline:get_line            ( [int size] );                   [-0|1, +1, e]
        --读取指定大小数据，生成新的xline，同时复制状态
        --如果size <= 0或未指定，复制新的xline，原始xline数据内容清除，索引置1



    xline newline, int rawsize
              xline:get_head_line       ( );                                [-0, +2, e]
        --读取带数据头的一组数据
        --返回生成新的xline，以及数据头原始大小



    string    xline:get_str             (
                                        [
                                        int       size,
                                        int       type_size = 1
                                        ]
                                        );                              [-0|1|2, +1, e]
        --读取指定长度字符串，以字符串类型大小计
        --长度未提供时，提取以0结尾的字符串
        --类型大小未提供时，默认为1，即ascii字符串



    string    xline:get_ascii_str       ( [int size] );                   [-0|1, +1, e]
        --读取指定长度ascii字符串
    string    xline:get_unicode_str     ( [int size] );                   [-0|1, +1, e]
        --读取指定长度unicode字符串



    string    xline:get_head_ascii      ( [int size] );                   [-0|1, +1, e]
        --读取带头的ascii字符串
    string    xline:get_head_unicode    ( [int size] );                   [-0|1, +1, e]
        --读取带头的unicode字符串



    string    xline:get_vhead_str       ( );                                [-0, +1, e]
        --读取带头的字符串



●
    xline     xline:clear               ( );                                [-0, +1, -]
        --清除数据内容
    xline     xline:assign              ( xline );                          [-1, +1, c]
        --从另一xline中读取数据内容



    xline     xline:push                ( stirng fmt, ... );                [-?, +1, c]
        --指定写入格式，写入数据



    xline     xline:set_byte            ( int v );      --写入一个byte      [-1, +1, c]
    xline     xline:set_word            ( int v );      --写入一个word      [-1, +1, c]
    xline     xline:set_dword           ( int v );      --写入一个dword     [-1, +1, c]



    xline     xline:set_varint            ( int v );      --写入一个varin   [-1, +1, c]



    xline     xline:set_head            ( int size );                       [-1, +1, c]
        --写入数据头，自动根据状态加入数据头大小



    xline     xline:set_line            ( xline );  --写入xline的内容       [-1, +1, c]



    xline     xline:set_head_line       ( xline );  --写入带数据头xline内容 [-1, +1, c]



    xline     xline:set_str             ( string str, int type_size );      [-2, +1, c]
        --写入数据内容，自动根据状态加入结尾0



    xline     xline:set_ascii_str       ( string str ); --写入ascii         [-1, +1, c]
    xline     xline:set_unicode_str     ( string str ); --写入unicode       [-1, +1, c]



    xline     xline:set_head_ascii      ( string str ); --写入带头的ascii   [-1, +1, c]
    xline     xline:set_head_unicode    ( string str ); --写入带头的unicode [-1, +1, c]



    xline     xline:set_vhead_str       ( string str ); --写入带头的字符串  [-1, +1, c]



●
    xline.gb    = xline.get_byte;
    xline.gw    = xline.get_word;
    xline.gd    = xline.get_dword;
    xline.gv    = xline.get_varint;
    xline.gh    = xline.get_head;
    xline.gl    = xline.get_line;
    xline.ghl   = xline.get_head_line;
    xline.gs    = xline.get_str;
    xline.ga    = xline.get_ascii_str;
    xline.gu    = xline.get_unicode_str;
    xline.gha   = xline.get_head_ascii;
    xline.ghu   = xline.get_head_unicode;
    xline.gvs   = xline.get_vhead_str;

    xline.cl    = xline.clear;
    xline.as    = xline.assign;

    xline.sb    = xline.set_byte;
    xline.sw    = xline.set_word;
    xline.sd    = xline.set_dword;
    xline.sv    = xline.set_varint;
    xline.sh    = xline.set_head;
    xline.sl    = xline.set_line;
    xline.shl   = xline.set_head_line;
    xline.ss    = xline.set_str;
    xline.sa    = xline.set_ascii_str;
    xline.su    = xline.set_unicode_str;
    xline.sha   = xline.set_head_ascii;
    xline.shu   = xline.set_head_unicode;
    xline.svs   = xline.set_vhead_str;



●
    xline     line;                               --小端，头大小2 byte，不包含头，不处理结尾0
    xline     netline;                            --大端，头大小2 byte，不包含头，不处理结尾0



-------- -------- -------- --------
                xlog操作
-------- -------- -------- --------



●
    void      xlog            ( ... );  --无条件输出debugview               [-?, +0, -]
        --注意，如果在加载前此函数被预定义，则使用预定义

    void      dbgview         ( ... );  --无条件输出debugview               [-?, +0, -]
        --此函数用于在xlog被替换的情况下，还可选择输出到debugview



●
    string    xlog_level;
        --"off"       --屏蔽输出
        --"fatal"     --致命错误，程序无法继续执行
        --"error"     --反映错误，例如一些API的调用失败
        --"warn"      --反映某些需要注意的可能有潜在危险的情况，可能会造成崩溃或逻辑错误之类
        --"info"      --表示程序进程的信息
        --"debug"     --普通的调试信息，这类信息发布时一般不输出
        --"trace"     --最精细的调试信息，多用于定位错误，查看某些变量的值
        --"on"        --全输出



●
    --根据xlog_level的动态调试等级，决定是否输出信息
    --函数组底层调用xlog输出信息，修改xlog函数能实现信息转向
    void      xfail           ( ... );                                      [-?, +0, -]
    void      xerr            ( ... );                                      [-?, +0, -]
    void      xwarn           ( ... );                                      [-?, +0, -]
    void      xinfo           ( ... );                                      [-?, +0, -]
    void      xdbg            ( ... );                                      [-?, +0, -]
    void      xtrace          ( ... );                                      [-?, +0, -]



●
    --将信息输出函数组加入string表
    void      stirng:xlog     ( ... );                                      [-?, +0, -]
    void      stirng:xfail    ( ... );                                      [-?, +0, -]
    void      string:xerr     ( ... );                                      [-?, +0, -]
    void      string:xwarn    ( ... );                                      [-?, +0, -]
    void      string:xinfo    ( ... );                                      [-?, +0, -]
    void      string:xdbg     ( ... );                                      [-?, +0, -]
    void      string:xtrace   ( ... );                                      [-?, +0, -]



-------- -------- -------- --------
                zlib操作
-------- -------- -------- --------



●
    string    zlib_compress   ( string ); --zlib数据压缩                  [-1, +1, c|v]
    string    zlib_uncompress ( string ); --zlib数据解压缩                [-1, +1, c|v]
    string    gzip_compress   ( string ); --gzip数据压缩                  [-1, +1, c|v]
    string    gzip_uncompress ( string ); --gzip数据解压缩                [-1, +1, c|v]

    string    string:zcp      ( );        --zlib数据压缩                    [-0, +1, v]
    string    string:zup      ( );        --zlib数据解压缩                  [-0, +1, v]
    string    string:gzcp     ( );        --gzip数据压缩                    [-0, +1, v]
    string    string:gzup     ( );        --gzip数据解压缩                  [-0, +1, v]

